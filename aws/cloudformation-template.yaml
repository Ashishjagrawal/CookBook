AWSTemplateFormatVersion: '2010-09-09'
Description: 'Recipe Sharing Platform - Minimal AWS Deployment'

Parameters:
  Environment:
    Type: String
    Default: 'dev'
    AllowedValues: ['dev', 'prod']
    Description: 'Environment name'
  
  AppPort:
    Type: Number
    Default: 4323
    Description: 'Application port'
  
  DatabasePassword:
    Type: String
    NoEcho: true
    Default: 'RecipePassword123!'
    Description: 'Database password'
  
  JWTSecret:
    Type: String
    NoEcho: true
    Default: 'your-super-secret-jwt-key-change-this-in-production'
    Description: 'JWT secret key'

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-vpc'

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet-1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-subnet-2'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-alb-sg'
      GroupDescription: 'Security group for Application Load Balancer'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-alb-sg'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-ecs-sg'
      GroupDescription: 'Security group for ECS tasks'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref AppPort
          ToPort: !Ref AppPort
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
        - IpProtocol: tcp
          FromPort: 9200
          ToPort: 9200
          SourceSecurityGroupId: !Ref ECSSecurityGroup
        - IpProtocol: tcp
          FromPort: 9092
          ToPort: 9092
          SourceSecurityGroupId: !Ref ECSSecurityGroup
        - IpProtocol: tcp
          FromPort: 2181
          ToPort: 2181
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ecs-sg'

  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${AWS::StackName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE
          Weight: 1

  # ECS Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-task'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 2048
      Memory: 4096
      ExecutionRoleArn: !Ref TaskExecutionRole
      ContainerDefinitions:
        - Name: postgres
          Image: postgres:15
          Essential: true
          PortMappings:
            - ContainerPort: 5432
              Protocol: tcp
          Environment:
            - Name: POSTGRES_DB
              Value: recipe_platform
            - Name: POSTGRES_USER
              Value: recipe_user
            - Name: POSTGRES_PASSWORD
              Value: !Ref DatabasePassword
            - Name: POSTGRES_HOST_AUTH_METHOD
              Value: md5
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: postgres

        - Name: elasticsearch
          Image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
          Essential: true
          PortMappings:
            - ContainerPort: 9200
              Protocol: tcp
            - ContainerPort: 9300
              Protocol: tcp
          Environment:
            - Name: discovery.type
              Value: single-node
            - Name: xpack.security.enabled
              Value: 'false'
            - Name: ES_JAVA_OPTS
              Value: '-Xms512m -Xmx512m'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: elasticsearch

        - Name: zookeeper
          Image: confluentinc/cp-zookeeper:latest
          Essential: true
          PortMappings:
            - ContainerPort: 2181
              Protocol: tcp
          Environment:
            - Name: ZOOKEEPER_CLIENT_PORT
              Value: '2181'
            - Name: ZOOKEEPER_TICK_TIME
              Value: '2000'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: zookeeper

        - Name: kafka
          Image: confluentinc/cp-kafka:7.4.0
          Essential: true
          PortMappings:
            - ContainerPort: 9092
              Protocol: tcp
          Environment:
            - Name: KAFKA_BROKER_ID
              Value: '1'
            - Name: KAFKA_ZOOKEEPER_CONNECT
              Value: 'localhost:2181'
            - Name: KAFKA_ADVERTISED_LISTENERS
              Value: 'PLAINTEXT://localhost:9092'
            - Name: KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
              Value: 'PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
            - Name: KAFKA_INTER_BROKER_LISTENER_NAME
              Value: 'PLAINTEXT'
            - Name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              Value: '1'
            - Name: KAFKA_AUTO_CREATE_TOPICS_ENABLE
              Value: 'true'
          DependsOn:
            - ContainerName: zookeeper
              Condition: START
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: kafka

        - Name: app
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-repo:latest'
          Essential: true
          PortMappings:
            - ContainerPort: !Ref AppPort
              Protocol: tcp
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: PORT
              Value: !Ref AppPort
            - Name: DATABASE_URL
              Value: !Sub 'postgresql://recipe_user:${DatabasePassword}@localhost:5432/recipe_platform?schema=public'
            - Name: ELASTICSEARCH_NODE
              Value: 'http://localhost:9200'
            - Name: KAFKA_BROKER
              Value: 'localhost:9092'
            - Name: JWT_SECRET
              Value: !Ref JWTSecret
            - Name: JWT_EXPIRES_IN
              Value: '7d'
            - Name: OPENAI_API_KEY
              Value: 'your-openai-api-key-here'
          DependsOn:
            - ContainerName: postgres
              Condition: START
            - ContainerName: elasticsearch
              Condition: START
            - ContainerName: kafka
              Condition: START
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: app

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALBListener
    Properties:
      ServiceName: !Sub '${AWS::StackName}-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets:
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          AssignPublicIp: ENABLED
      LoadBalancers:
        - ContainerName: app
          ContainerPort: !Ref AppPort
          TargetGroupArn: !Ref TargetGroup

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${AWS::StackName}-alb'
      Scheme: internet-facing
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-tg'
      Port: !Ref AppPort
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  # IAM Roles
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/ecs/${AWS::StackName}'
      RetentionInDays: 7

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub '${AWS::StackName}-repo'
      ImageScanningConfiguration:
        ScanOnPush: true

Outputs:
  LoadBalancerURL:
    Description: 'URL of the Application Load Balancer'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}'
    Export:
      Name: !Sub '${AWS::StackName}-alb-url'

  GraphQLPlaygroundURL:
    Description: 'GraphQL Playground URL'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}/graphql'
    Export:
      Name: !Sub '${AWS::StackName}-graphql-url'

  HealthCheckURL:
    Description: 'Health Check URL'
    Value: !Sub 'http://${ApplicationLoadBalancer.DNSName}/api/health'
    Export:
      Name: !Sub '${AWS::StackName}-health-url'

  ECRRepositoryURI:
    Description: 'ECR Repository URI'
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${AWS::StackName}-repo'
    Export:
      Name: !Sub '${AWS::StackName}-ecr-uri'
